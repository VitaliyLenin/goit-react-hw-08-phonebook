{"version":3,"file":"static/js/238.247e6c8e.chunk.js","mappings":"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","sources":["Redux/Filter/filter-selectors.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","Redux/Contacts/contacts-selectors.js","webpack://goit-react-hw-08-phonebook/./src/components/MyContactForm/MyContactForm.module.css?52ef","components/MyContactForm/MyContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/MyContactsFilter/MyContactsFilter.module.css?5e5b","components/MyContactsFilter/MyContactsFilter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/MyContacts.module.css?aa16","components/Contacts/MyContacts.jsx"],"sourcesContent":["export const getFilter = store => store.filter;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { getFilter } from 'Redux/Filter/filter-selectors';\nimport { createSelector } from '@reduxjs/toolkit';\n\nexport const getAllContacts = store => store.contacts.items;\n\nexport const getFilteredContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) => {\n      const normalizedName = name.toLowerCase();\n      return normalizedName.includes(normalizedFilter);\n    });\n  }\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook_wrapper\":\"MyContactForm_phonebook_wrapper__Jz556\",\"phonebook_form\":\"MyContactForm_phonebook_form__RJFCs\",\"input\":\"MyContactForm_input__hxAIX\",\"button\":\"MyContactForm_button__T6bIW\"};","import { useState } from 'react';\n\nimport { getAllContacts } from 'Redux/Contacts/contacts-selectors';\nimport { fetchAddContact } from 'Redux/Contacts/contacts-operations';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport css from './MyContactForm.module.css';\n\nconst MyContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setPhone] = useState('');\n\n  const contacts = useSelector(getAllContacts);\n\n  const dispatch = useDispatch();\n\n  const isDublicate = name => {\n    const normalizedName = name.toLowerCase();\n    const result = contacts.find(({ name }) => {\n      return name.toLowerCase() === normalizedName;\n    });\n\n    return Boolean(result);\n  };\n\n  const handleAddContact = async ({ name, number }) => {\n    if (isDublicate(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n\n    await dispatch(fetchAddContact({ name, number }));\n\n    setName('');\n    setPhone('');\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit = handleAddContact({ name, number });\n  };\n\n  return (\n    <div className={css.phonebook_wrapper}>\n      <form className={css.phonebook_form} onSubmit={handleSubmit}>\n        <label>Name</label>\n        <input\n          className={css.input}\n          onChange={event => setName(event.target.value)}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          placeholder=\"contact name\"\n        />\n\n        <label>Number</label>\n        <input\n          className={css.input}\n          onChange={event => setPhone(event.target.value)}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          placeholder=\"contact number\"\n        />\n\n        <button className={css.button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default MyContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_wrapper\":\"ContactList_contacts_wrapper__FulCe\",\"contact_items\":\"ContactList_contact_items__Z0qeG\",\"contactList\":\"ContactList_contactList__UFVCg\",\"button\":\"ContactList_button__7kL4l\",\"contactList__item\":\"ContactList_contactList__item__2K2vx\",\"contactList__name\":\"ContactList_contactList__name__DI0r4\",\"contactList__number\":\"ContactList_contactList__number__olBKR\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\n\nimport { getFilteredContacts } from 'Redux/Contacts/contacts-selectors';\n// import { deleteContact } from 'Redux/Contacts/contacts-operations';\n// import { fetchContacts } from 'Redux/Contacts/contacts-operations';\n// import {\n//   fetchContacts,\n//   deleteContact,\n// } from 'Redux/Contacts/contacts-operations';\n\nimport {\n  fetchAllContacts,\n  fetchDeleteContact,\n} from 'Redux/Contacts/contacts-operations';\n\nimport css from './ContactList.module.css';\n\nconst MyContactList = () => {\n  const [loadingContacts, setLoadingContacts] = useState(true);\n  const [loading, setLoading] = useState({});\n  const contacts = useSelector(getFilteredContacts);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setLoading(false);\n    dispatch(fetchAllContacts());\n\n    setLoadingContacts(false);\n  }, [dispatch]);\n\n  const handleRemoveContact = async contactId => {\n    setLoading({ [contactId]: true });\n    await dispatch(fetchDeleteContact(contactId));\n    setLoading({ [contactId]: false });\n  };\n\n  return (\n    <>\n      {loadingContacts ? (\n        <p>Loading..</p>\n      ) : (\n        <ul className={css.contactList}>\n          {contacts.map(({ id, name, number }) => (\n            <li key={id} className={css.contactList__item}>\n              <p className={css.contactList__name}>{name}: </p>\n              <p className={css.contactList__number}>{number}</p>\n\n              {!loading[id] ? (\n                <button\n                  className={css.button}\n                  onClick={() => handleRemoveContact(id)}\n                  type=\"button\"\n                >\n                  Delete\n                </button>\n              ) : (\n                <div className={css.loader}>Loading...</div>\n              )}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default MyContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_wrap\":\"MyContactsFilter_filter_wrap__eteZw\",\"input\":\"MyContactsFilter_input__ZLQaP\"};","import { useSelector, useDispatch } from 'react-redux';\n\nimport { getFilter } from 'Redux/Filter/filter-selectors';\nimport { setFilter } from 'Redux/Filter/filter-slice';\n\nimport css from './MyContactsFilter.module.css';\n\nconst MyContactsFilter = () => {\n  const onSetFilter = payload => {\n    dispatch(setFilter(payload));\n  };\n\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = e => {\n    onSetFilter(e.target.value);\n  };\n\n  return (\n    <div className={css.filter_wrap}>\n      <label>Find contacts by name</label>\n      <input\n        className={css.input}\n        onChange={handleFilter}\n        name=\"filter\"\n        type=\"text\"\n        value={filter}\n      />\n    </div>\n  );\n};\n\nexport default MyContactsFilter;\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"MyContacts_title__ggJvr\"};","import MyContactForm from 'components/MyContactForm/MyContactForm';\nimport MyContactList from 'components/ContactList/ContactList';\nimport MyContactsFilter from 'components/MyContactsFilter/MyContactsFilter';\n\nimport css from './MyContacts.module.css';\n\nconst MyContacts = () => {\n  return (\n    <div>\n      <h2 className={css.title}>Phonebook</h2>\n      <MyContactForm />\n      <MyContactsFilter />\n      <h2 className={css.title}>Contacts</h2>\n      <MyContactList />\n    </div>\n  );\n};\n\nexport default MyContacts;\n"],"names":["getFilter","store","filter","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","value","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","find","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","map","name","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getAllContacts","contacts","items","getFilteredContacts","normalizedFilter","toLowerCase","includes","onSubmit","useState","setName","number","setPhone","useSelector","dispatch","useDispatch","isDublicate","normalizedName","result","Boolean","handleAddContact","alert","fetchAddContact","className","css","e","preventDefault","onChange","event","target","type","pattern","title","required","placeholder","loadingContacts","setLoadingContacts","loading","setLoading","useEffect","fetchAllContacts","handleRemoveContact","contactId","fetchDeleteContact","id","onClick","payload","setFilter"],"sourceRoot":""}